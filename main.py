#==================================
#   MODULES USED IN THIS FILE
#==================================

import discord
from discord import app_commands
from discord.ext import commands
import logging
import os
import time

from sunbot.apiHandler.VisualCrossingHandler import VisualCrossingHandler
from sunbot.apiHandler.discordHandler import DiscordHandler
import sunbot.sunbot as sunbot
from sunbot.SunBotHelpCommand import SunBotHelpCommand
from sunbot.SunController import SunController


#=======================
#    GLOBAL VARIABLES
#=======================

PATH_SAVE_USER_REP = "./Data/Save/Users/"

listeGifMignons = [
    "https://i.pinimg.com/originals/2a/65/72/2a6572296e58045b3f89c73e06e4916f.gif",
    "https://pa1.narvii.com/6935/ed72ab48336b42b9fdfaa9f245637841cb2208ber1-504-282_hq.gif",
    "https://acegif.com/wp-content/gifs/cute-bunny-gif-51.gif",
    "https://i.pinimg.com/originals/de/b9/49/deb949a2ea8afe6f7f0358137aac721b.gif",
    "https://img.filmsactu.net/datas/seriestv/t/h/the-mandalorian/n/the-mandalorian-gif-5fad8376c586e.gif",
    "https://2.bp.blogspot.com/-bKltZSToaSk/WpfSKtfVdZI/AAAAAAAADmY/mYeUGkpOdf8HoEq0c7N9Z5ixU5OuFn9FACLcBGAs/s1600/hamtaro.gif",
    "https://64.media.tumblr.com/a1f42c7b213265bde529ca41bd6c7e63/tumblr_nh5g2v3KlU1u465olo1_400.gifv",
    "https://c.tenor.com/rWDSYK2dWoMAAAAM/red-panda.gif",
    "https://tel.img.pmdstatic.net/fit/http.3A.2F.2Fprd2-bone-image.2Es3-website-eu-west-1.2Eamazonaws.2Ecom.2FTEL.2Enews.2F2018.2F01.2F11.2F7b751402-2a98-47d6-a69f-0e3d733181ed.2Egif/495x277/quality/80/thumbnail.gif",
    "https://phoneky.co.uk/thumbs/screensavers/down/cartoon-anime/sweetcat_jo9eelal.gif",
    "https://thumbs.gfycat.com/UnacceptableLittleCapybara-size_restricted.gif"
]

listeGifKernelDead = [
    "https://c.tenor.com/Ojww2DB8_x0AAAAd/dead-teletubbies.gif",
    "https://c.tenor.com/CXZRwTD_4BsAAAAM/im-dead-lol.gif",
    "https://c.tenor.com/LPYL83NEVcAAAAAM/dead-dog.gif",
    "https://c.tenor.com/X13wwMFZN2YAAAAM/dies-cat.gif"
]

logging.basicConfig(level=logging.INFO)
sunBot = commands.Bot(command_prefix='+', intents=discord.Intents.all(), help_command=SunBotHelpCommand())
sunController = SunController(sunBot)
vcRequestHandler = VisualCrossingHandler()
discordAPI_handler = DiscordHandler()
dictUsersBot = {}



#==================================
#     Ev√©nements li√©s au bot
#==================================

@sunBot.event
async def on_ready(): 
  await sunController.on_ready()

  """
  #Cr√©ation du thread √©coutant les alertes m√©t√©os:
  print("G√©n√©ration des webhooks...")
  webhookServeurTest1 = discord.SyncWebhook.from_url('https://discord.com/api/webhooks/923863299270013018/6jfjT1QtrZ8UCXM1aEUhUD7z5G5Or9S3loFvlQs34Age8hX7VPfrD4UUQvGXCzmDN0Oo')
  webhookServeurCUPGE = discord.SyncWebhook.from_url('https://discord.com/api/webhooks/921547043196002324/NJohjH9dduqidXHvV4Ei9V4KuIUvOiAPnbMEVPf_x06CUStZou0TlTapQi3B1i_zuLfp')
  webhookServeurPrive = discord.SyncWebhook.from_url('https://discord.com/api/webhooks/965521867026866196/M_nmSDjgplk8a6DAbzAD8qZVEMBoVvR1FF9Mcts_-NQRg3Qc5lvXmFSSgUJxgDcAOQb5')
  alerteMeteo = Meteo.AlerteMeteo(vcRequestHandler)
  #alerteMeteo.addWebhook(webhookServeurTest1)
  #alerteMeteo.addWebhook(webhookServeurPrive)
  alerteMeteo.start()
  print("Webhook alerte m√©t√©o pr√™t")
"""


@sunBot.event
async def on_member_join(member):
  await sunController.on_member_join(member)


@sunBot.event
async def on_message(message):
  await sunController.on_message(message)
  """
  if messageMin in ["patrick", "patou", "patoche", "pata", "patrikou"] and np.random.uniform() > 0.25:
      indiceGifToSend = int(np.random.uniform(0, len(listeGifMignons)))
      await message.reply(listeGifMignons[indiceGifToSend])
      await message.channel.send("Mignon !!")
  if "kernel is dead" in messageMin:
      indiceGifToSend = int(np.random.uniform(0, len(listeGifKernelDead)))
      await message.reply(listeGifKernelDead[indiceGifToSend])
  """


#====================
#    BOT'S COMMANDS
#====================


@sunbot.adminFunction
async def adminSetEmoji(ctx, userId :int, emoji : str, freq : float) :
  try :
    dictUsersBot[userId].setEmoji(emoji, freq)
  except KeyError:
    await ctx.channel.send("L'ID ne correspond √† aucun utilisateur de mes services...\U0001f622")
  except ValueError:
    await ctx.channel.send("La fr√©quence doit √™tre dans l'intervalle [0, 1] \U0001f620")
  else:
    await ctx.channel.send("L'emoji a bien √©t√© mis √† jour \U0001f642")


@sunBot.tree.command(name="ping", description="Si je suis r√©veill√©, je r√©ponds pong! Sinon... et bien c'est que je dors üò¥", guild=discord.Object(id=1029313313827471413))
async def ping(interaction : discord.Interaction):
  await sunController.ping(interaction)


@sunBot.tree.command(name="pluie", description="Quand va-t-il pleuvoir aujourd'hui? ‚òî",  guild=discord.Object(id=1029313313827471413))
@app_commands.describe(place_name="Nom de la localit√©")
async def pluie(interaction : discord.Interaction, place_name : str) -> None:
  await sunController.pluie(interaction, place_name)


@sunBot.tree.command(name="meteo", description="Donne la m√©t√©o courante", guild=discord.Object(id=1029313313827471413))
@app_commands.describe(place_name="Nom de la localit√©")
async def meteo(interaction : discord.Interaction, place_name : str) -> None:
  await sunController.meteo(interaction, place_name)


@sunBot.tree.command(name="daily_weather", description="Active ou d√©sactive l'envoi quotidien de la m√©t√©o du jour pour la localisation indiqu√©e", guild=discord.Object(id=726063782606143618))
@app_commands.describe(location_name = "Nom de la localit√©")
async def set_daily_weather_channel(interaction : discord.Interaction, location_name : str) -> None:
  await sunController.set_daily_weather_channel(interaction, location_name)


@sunBot.tree.command(name="mp_daily_weather", description="Active ou d√©sactive l'envoi quotidien de la m√©t√©o du jour pour la localisation indiqu√©e", guild=discord.Object(id=726063782606143618))
@app_commands.describe(location_name="Nom de la localit√©")
async def set_daily_weather_pm(interaction : discord.Interaction, location_name : str) -> None:
  """Listen for set daily weather private message slash command call"""
  await sunController.set_daily_weather_pm(interaction, location_name)


@sunBot.command(name="favMeteo", brief="Envie de conna√Ætre la m√©t√©o d'une localit√© sans te casser la t√™te ? Cette commande est pour toi !")
async def favMeteo(ctx, nomLocalite):
  print(f"Tentative de modification du favori m√©t√©o de {ctx.author.name} vers {nomLocalite}")
  print(f"V√©rification de l'existence de la localit√© {nomLocalite} dans l'API...")
  #R√©alise une requ√™te pour s'assurer de l'existence de la localit√© souhait√©e :
  reponseRequest = vcRequestHandler.performRequest(f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{nomLocalite}/today?unitGroup=metric&include=days&key={os.environ['idVisualCrossing']}&contentType=json&lang=fr")
  #Si la requ√™te a √©chou√© :
  if reponseRequest == {}:
    print(f"La localit√© {nomLocalite} ne semble pas exister dans la base de donn√©es de l'API")
    await ctx.channel.send(f"Je n'arrive pas √† trouver une localit√© correspondant √† {nomLocalite} \U0001f914")
  #Sinon, modifier la localit√© favorite et le time offset :
  else :
    dictUsersBot[ctx.author.id].favMeteo = nomLocalite
    dictUsersBot[ctx.author.id].offSetFav = reponseRequest["tzoffset"]
    print("Favori mis √† jour avec succ√®s")
    #Envoie un message de confirmation de modification √† l'utilisateur :
    await ctx.channel.send(f"Ta localit√© favorite a bien √©t√© mise √† jour et est d√©sormais {nomLocalite} \U0001f604 !")


@sunBot.command(name="vocalConnect", brief="Vous m'avez appelez ? Je vous r√©ponds (vraiment) ! [admin]")
@sunbot.adminFunction
async def vocalConnect(ctx):
  channel = ctx.author.voice.channel
  await channel.connect()
  time.sleep(1)
  ctx.voice_client.play(discord.FFmpegPCMAudio("./Data/Source/alpha.mp3"))


@sunBot.command(name="vocalDisconnect", brief="Deconnexion serveur vocal [admin]")
@sunbot.adminFunction
async def vocalDisconnect(ctx):
  await ctx.voice_client.disconnect()


@sunBot.command(name="setEmoji", brief="Commande √† utiliser pour ajouter un emoji √† un membre ! [admin]")
async def setEmoji(ctx, userId : int, emoji : str, freq : float) -> None:
  """ Commande permettant de mettre √† jour l'emoji ajout√© aux messages post√©s par l'utilisateur dont l'ID est
  pass√© en param√®tre.
  Param√®tres :  - ctx : contexte d'appel de la compile
                - userId : Identifiant de l'utisateur dont on souhaite modifier l'emoji
                - freq : fr√©quende d'apparition de l'√©moji sur les messages envoy√©s par l'utilisateur
  Ne retourne rien
  """
  await adminSetEmoji(ctx, userId, emoji, freq)


@sunBot.command(name="disconnect", brief="Vous voulez vraiment me tuer ?!! [Admin]")
@sunbot.adminFunction
async def disconnect(unused_ctx):
  print("D√©connexion du bot...")
  #Enregistrement des donn√©es des utilisateurs (un fichier par utilisateur) :
  for userId in dictUsersBot :
    dictUsersBot[userId].saveUser(PATH_SAVE_USER_REP)
  print("D√©connexion termin√©e")
  await sunBot.logout()


#####################################################################################################
#ALWAYS RUN PART - NE RIEN METTRE SOUS CES LIGNES - ALWAYS RUN PART - NE RIEN METTRE SOUS CES LIGNES
#####################################################################################################

sunBot.run(os.environ['token'])
